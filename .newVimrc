filetype plugin indent on
syntax on

"General
set number	" Show line numbers
set numberwidth=4 " set number field width
set linebreak	" Break lines at word (requires Wrap lines)
set showbreak=+++ 	" Wrap-broken line prefix
set textwidth=100	" Line wrap (number of cols)
set showmatch	" Highlight matching brace
set spell	" Enable spell-checking
set wildmenu
set wildmode=list:longest,full
set mouse=a     " to get mouse support
set mousefocus  " mouse click will select pane

set hlsearch	" Highlight all search results
set smartcase	" Enable smart-case search
set ignorecase	" Always case-insensitive
set incsearch	" Searches for strings incrementally

set autoindent	" Auto-indent new lines
set cindent	" Use 'C' style program indenting
set expandtab	" Use spaces instead of tabs
set shiftwidth=2	" Number of auto-indent spaces
set smartindent	" Enable smart-indent
set smarttab	" Enable smart-tabs
set softtabstop=2	" Number of spaces per Tab

"" Advanced
set confirm	" Prompt confirmation dialog
set ruler	" Show row and column ruler information
"set colorcolumn=141
"highlight ColorColumn ctermbg=darkgray
"set tw=79
set undolevels=1000	"Number of undo levels
set backspace=indent,eol,start	"Backspace behaviour

"highlight current line
set cursorline
" visible indent lines
"set listchars=tab:\|\
"set list

" autoreload
set autoread

" plugins
call plug#begin('~/.vim/plugged')
" Put your plugins here.
Plug 'preservim/nerdtree'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'morhetz/gruvbox'
"Plug 'zxqfl/tabnine-vim'
Plug 'jiangmiao/auto-pairs'
call plug#end()

"colorscheme
colorscheme gruvbox
set bg=dark
" setting leader
let mapleader = " "

" crtl+p config
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\.git$\|\.yardoc\|node_modules\|log\|tmp$',
  \ 'file': '\.so$\|\.dat$|\.DS_Store$'
  \ }

" nerd tree config
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") | exe 'NERDTree' argv()[0] | wincmd p | ene | exe 'cd '.argv()[0] | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <C-B> :NERDTreeToggle<CR>
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"=================
" fzf and ripgrep
"=================

" --column: Show column number
" --line-number: Show line number
" --no-heading: Do not show file headings in results
" --fixed-strings: Search term as a literal string
" --ignore-case: Case insensitive search
" --no-ignore: Do not respect .gitignore, etc...
" --hidden: Search hidden files and folders
" --follow: Follow symlinks
" --glob: Additional conditions for search (in this case ignore everything in the .git/ folder)
" --color: Search color options
command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>), 1, <bang>0)
command! -bang -nargs=* Rg call fzf#vim#grep('rg --column --line-number --fixed-strings --color=always --smart-case --hidden --sort=path '.shellescape(<q-args>), 1, fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}), <bang>0)
set grepprg=rg\ --vimgrep\ --smart-case\ --hidden\ --follow
let g:rg_derive_root='true'
set rtp+=~/.fzf
set rtp+=/usr/local/opt/fzf
"test
"command! -bang -nargs=* Rg call fzf#vim#grep('rg --smart-case --line-number --no-heading --color=always --colors "path:fg:93,169,245" --colors "line:fg:128,128,128" --colors "match:fg:195,232,141" --no-hidden -- ignore '.shellescape(<q-args>),0,fzf#vim#with_preview({'options': '-e --delimiter : --nth 3..'}),<bang>0)

nnoremap <C-P> :Files<cr>
nnoremap <C-F> :Rg<cr>

" addign cpp header in .cpp files
au bufnewfile *.cpp 0r ~/.vim/header/header-cpp.temp
au bufnewfile,bufread *.cpp :call MakeCpp()


""" Compilling c++ and executing
nnoremap <leader><C-b> :!g++ -o %:r.out % && ./%:r.out<CR>

""""" making environment for cpp
fu! MakeCpp()
  vsplit /mnt/extra/io/input.txt
  split /mnt/extra/io/output.txt
endfunction
nnoremap <leader>cpp :call MakeCpp()<CR>

""""" resizing split window
nnoremap <C-Left> :vertical resize -5<CR>
nnoremap <C-Right> :vertical resize +5<CR>
nnoremap <C-Up> :resize +5<CR>
nnoremap <C-Down> :resize -5<Cr>

""""" terminsl emulation
nnoremap <silent> <leader>sh :terminal<CR>"""

""" spliting setting
set splitright
set splitbelow

""""tab completion
set wildmenu
